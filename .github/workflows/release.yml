name: 'C++ CI'

on:
  push:
    branches:
      - main
      - feature/github_actions

jobs:
  build_ubuntu:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: sudo apt-get update && sudo apt-get install libboost-test-dev -y
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }}
      - run: cmake --build .
      - run: cmake --build . --target test
      - run: cmake --build . --target package
      - name: Create Release (Ubuntu)
        id: create_release_ubuntu
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }} (Ubuntu)
          draft: false
          prerelease: false
      - name: Upload Release Asset (Ubuntu)
        id: upload-release-asset-ubuntu
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_ubuntu.outputs.upload_url }}
          asset_path: ./helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_name: helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package
  build_windows:
    runs-on: windows-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Visual Studio Build Tools
        uses: microsoft/setup-msbuild@v2
        with:
          visualstudio-version: 'latest'
          include-build-tools: true
          include-prerequisites: true
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }} -G "Visual Studio 17 2022" # Выбираете версию Visual Studio
      - run: cmake --build . --config Release 
      - run: cmake --build . --target test --config Release  
      - run: cmake --build . --target package --config Release 
      - name: Create Release (Windows)
        id: create_release_windows
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }} (Windows)
          draft: false
          prerelease: false
      - name: Upload Release Asset (Windows)
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_windows.outputs.upload_url }}
          asset_path: ./helloworld-0.0.${{ github.run_number }}-Windows.exe
          asset_name: helloworld-0.0.${{ github.run_number }}-Windows.exe
          asset_content_type: application/x-msdownload
